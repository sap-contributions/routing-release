<%=
  require 'json'

  nats_link_name = 'nats'
  if p('nats.tls.enabled')
    nats_link_name = 'nats-tls'
  end

  nats_machines = nil
  if_p('nats.machines') do |ips|
    nats_machines = ips.compact
  end.else_if_link(nats_link_name) do |nats_link|
    nats_link.if_p("nats.hostname") do |hostname|
      nats_machines = [hostname]
    end.else do
      nats_machines = nats_link.instances.map { |instance| instance.address }
    end
  end

  nats_port = nil
  if_p('nats.port') do |prop|
    nats_port = prop
  end.else_if_link(nats_link_name) do |nats_link|
    nats_port = nats_link.p("nats.port")
  end

  nats_user = nil
  if_p('nats.user') do |prop|
    nats_user = prop
  end.else_if_link(nats_link_name) do |nats_link|
    nats_link.if_p("nats.user") do |prop|
      nats_user = prop
    end
  end

  nats_password = nil
  if_p('nats.password') do |prop|
    nats_password = prop
  end.else_if_link(nats_link_name) do |nats_link|
    nats_link.if_p("nats.password") do |prop|
      nats_password = prop
    end
  end

  message_bus_servers = nil
  if nats_user and nats_password
    message_bus_servers = nats_machines.map do |host|
      {
        host: "#{host}:#{nats_port}",
        user: "#{nats_user}",
        password: "#{nats_password}"
      }
    end
  else
    message_bus_servers = nats_machines.map do |host|
      {
        host: "#{host}:#{nats_port}"
      }
    end
  end

  routes = p('route_registrar.routes')

  routes.each_with_index do |route, index|
    if route['tls_port'] != nil && (route['server_cert_domain_san'] == nil || route['server_cert_domain_san'].length <= 0)
      raise "expected route_registrar.routes[#{index}].route.server_cert_domain_san when tls_port is provided"
    end

    if route['protocol'] != nil && (route['protocol'] != 'http1' && route['protocol'] != 'http2')
      raise "expected route_registrar.routes[#{index}].route.protocol to be http1 or http2 when protocol is provided"
    end

    if route['prepend_instance_index']
      route['uris'].map! { |uri| "#{spec.index}-#{uri}" }
    end

    if route['type'] == 'sni'
      route['sni_routable_san'] = spec.address

      if route.key?('server_cert_domain_name_modifier')
        if route['server_cert_domain_name_modifier'].key?('key')
            route['sni_routable_san'] = spec.address.gsub(route['server_cert_domain_name_modifier']['key'], route['server_cert_domain_name_modifier']['value'])
        else
            raise "expected route_registrar.routes[#{index}].route.server_cert_domain_name_modifier.key when server_cert_domain_name_modifier is provided"
        end
      end
    end
  end

  host = nil
  if_p('host') do |prop|
    host = prop
  end.else do
    host = spec.ip
  end

  routing_api = {
    ca_certs: '/var/vcap/jobs/route_registrar/config/certs/ca.crt',
    client_cert_path: '/var/vcap/jobs/route_registrar/config/routing_api/certs/client.crt',
    client_private_key_path: '/var/vcap/jobs/route_registrar/config/routing_api/keys/client_private.key',
    server_ca_cert_path: '/var/vcap/jobs/route_registrar/config/routing_api/certs/server_ca.crt',
    max_ttl: '120s',
  }
  if_link('routing_api') do |link|
    link.if_p('routing_api.max_ttl') do |prop|
      routing_api[:max_ttl] = prop
    end
  end

  if_p('route_registrar.routing_api.api_url') do |prop|
    if_link('routing_api') do |link|
      if link.p('routing_api.enabled_api_endpoints') == "mtls" and not prop.start_with?('https')
          raise 'expected route_registrar.routing_api.api_url to be https when routing_api.enabled_api_endpoints is mtls only'
      end
    end

    routing_api['api_url'] = prop
  end
  if_p('route_registrar.routing_api.oauth_url') do |prop|
    routing_api['oauth_url'] = prop
  end
  if_p('route_registrar.routing_api.client_id') do |prop|
    routing_api['client_id'] = prop
  end
  if_p('route_registrar.routing_api.client_secret') do |prop|
    routing_api['client_secret'] = prop
  end

  routing_api['skip_ssl_validation'] = p('route_registrar.routing_api.skip_ssl_validation')

  nats_mtls_config = {
     enabled: p('nats.tls.enabled'),
     cert_path: '/var/vcap/jobs/route_registrar/config/nats/certs/client.crt',
     key_path: '/var/vcap/jobs/route_registrar/config/nats/certs/client_private.key',
     ca_path: '/var/vcap/jobs/route_registrar/config/nats/certs/server_ca.crt'
  }

  config = {
    message_bus_servers: message_bus_servers,
    nats_mtls_config: nats_mtls_config,
    host: host,
    routes: routes,
    routing_api: routing_api,
  }
  JSON.pretty_generate(config)
%>
